0916 금요일
<출석체크>
09:10 문호준, 박근태, 박세웅, 서선호, 오세영, 차형주, 체제형(오후)

<공지사항>
- 오늘 하루 좋은 키보드 써볼사람


<학습목표>
- 자바스크립트 총복습
	<1교시>
	- 자바스크립트와 브라우저의 역사
		30년쯤전에 마크엔더슨이 네스케이프사를 창립.
		브랜든에이크를 영입해서 라이브스크립트 (2주정도만에 개발. 프로토타입 기반)
		인기에 편승하기위해서 자바스크립트로 이름을 바꾸고
		MS의 익스플로러가 점유율을 이용해서 표준을 안지키다가, 구글의 크롬이 나왔을때부터 다시 표준화 진행
		ECMA협회에서 표준화 진행. ES5, ES6   //EcmaScript의 버전을 말하는 것
	- 자바스크립트가 보통의 언어와 다른점
		호이스팅 : js인터프리터가 '선언'을 스코프의 제일 위로 끌어올리는 행위
		다이나믹 타입드 : 선언, 정의때 데이터타입이 결정되는것이 아니라, 값이 할당될때 타입이 결정.
		일급객체 : first class object.  
		     js에서는 함수가 일급객체이기 때문에 변수에 할당, 다른함수의 리턴, 파라미터로 전달
			 즉 함수를 변수처럼 쓸수있다.
	- html을 통한 js사용, 브라우저에서 바로 js사용, 브라우저없이 js사용
		- 외부파일 : <script src="외부js파일경로">
		- html에서 직접 : <script>  js소스  </script>
		- 브라우저에서 바로 : console탭 열어서 js소스
		- 브라우저 없이 : nodejs 환경에서
	- 데이터타입
		- 원시형 : string, number, boolean, null, undeifned
			값에의한 참조.   let a=5;   b=a;     b=70;    a는 여전히 5. 
		- 객체형 : 원시형 타입말고 모든 타입
		    주소에 의한 참조.   let x = [1,2,3];   let y=x;  일때
                		  y[2] = 100하면 x가 [1,2,100]이 된다.
	- 연산자
		- 산술 : + - * / % **
		- 증감 : ++,  --  변수의 앞에 쓰이면 증감후 사용,  뒤에 쓰이면 사용후 증감
		- 할당 : =,  산술과 합쳐진 =(+=, -= 등등)
		- 비교 : ==(값), ===(값과 타입), !=(값이 다르다), !==(값과 타입이 다르다.)
		       <, <=, >, >=
		- 논리 : &&(and), ||(or), !(not)
		- 비트 : &, |, ^(xor), ~(not), <<(오른쪽쉬프트), >>(왼쪽쉬프트)
				//bit : 0과1
			예) 1&
	- 변수
		- what : (변하는)값을 담을 그릇
		- why : 이 값이 무엇을 의미하는지 이름,  값을 반복해서 여기저기서 쓸때 하나의 그릇으로 참조
		- how: 	
			- var : variable의 약자. 옛날에 변수선언 키워드.  
					일반적인 프로그래밍 상식에 어긋나는 일이 많이 일어나기 때문에 최대한 안쓰는것이 좋다.
					재선언가능, 호이스팅의 유효범위가 일반 블럭이 아니라 함수에만 적용. 
			- let : let의 약자. 
			- const : constant의 약자. 상수.  한번 초기화되면 값을 변경할 수 없다.
		- 유효범위(스코프) : 함수나, 변수나, 객체 등이 선언된 시점으로부터 살아 있을수 있는 범위
					  (접근할 수 있는 범위)
					  부모(바깥 영역)에 선언된 변수는 자식(안쪽 영역)에서 접근 할 수 있다.
					  일반적으로 {}안에 있으면 지역변수로 취급된다.
	- 조건문
		- 삼항    조건과 본문이 매우 간단할때 쓰면 좋다.
				  조건?참일때실행:거짓일때실행문;
		- if    일반적일때, 중첩구조일때 쓰면 좋다.
				  if(조건){본문}     필요할경우 else if와 else
		- switch  딱 떨어지는 조건에 쓰면 좋다.
				  switch(조건){
					case 만족값:
						내용
						break;
					case 만족값2:
						내용
						break;
	- 반복문
		- for     횟수를 기반으로 반복할때 좋다.
				  for(초기화; 조건; 스탭){ 본문 };
		- while   조건을 기반으로 반복할때 좋다.
				  while(조건){ 본문 };
		- do-while 조건인데 최초의 한번은 조건검사없이 무조건 실행함.
				  do{본문} while(조건);
		
	
	<2교시>
	- 배열
		- what : 같은 성격의 데이터들이 순서대로 늘어선 묶음
		- why : 여러개의 변수로 쓰면 관리가 어렵기 때문에 묶어서 하나로 관리
		     예) let stu1 = "홍길동",   let stu2 = "김철수',  let stu3 = "정상필"
			    let class1 = ["홍길동", "김철수", "정상필"...]
		- how : 정의 : let 배열명 = [원소1, 원소2, 원소3...];
		              let 배열명 = new Array(원소들);
				호출 : 배열명[인덱스]		//인덱스는 0부터 시작한다.
		- CRUD(Create, Read, Update, Delete)
		- 내장함수
			indexOf(값);	//일치하는값의 처음인덱스
			includes(값);	//값이 있으면true, 없으면 false
			push(요소);	//맨뒤에 요소추가
			pop();		//맨뒤에 요소를 제거하면서 리턴
			splice(시작인덱스, 지울갯수);	//시작부터 지울갯수를 지우
			join(사잇글자);		//배열의 요소를 모두 합치면서 중간중간에 사잇글자를 넣은 하나의 스트링으로 반환
			sort();		//문자열 순서대로 정렬.   문자열 순서가 아니라 별도의 기준을 정해주고싶으면 콜백함수 전달
			reverse();	//역순으로 정렬
		- 향상된for문
			기본for     for(let i=0; i<배열.length; i++){ 배열[i]접근 };
			in : for(let 변수명 in 배열명)     //모든 키(인덱스) 반환
			of : for(let 변수명 of 배열명)	  //모든 값 리턴
	- 함수
		- what : 인풋을 받아 특정한 로직을 실행후 아웃풋을 반환하는 코드의 묶음
		- why : 반복되는 코드를 하나의 호출로 쓰기위해서, 이코드가 의미하는것이 뭔지 이름
		- how
			- 정의
				- 선언식 :  function 함수명(파라미터){ 본문; return 반환값;}
				- 표현식 :  let 변수명 = function(파라미터) { 본문; return 반환값; }
					함수를 변수에 할당할수 있는것은 자바스크립트에서 함수가 일급객체이기 때문에 가능.
					함수의 이름을 전달한것과 함수를 호출한것을 구분할 수 있어야한다.
					호출은 괄호 열고닫고가 있다.
		- 파라미터 vs 아규먼트 : 파라미터는 정의할때의 인풋,   아규먼트는 호출할때의 인풋
				파라미터가 없는 함수가 있을 수 있다.
		- 리턴 : 함수는 return키워드를 만나면 뒤를 실행안하고 즉시 종료한다. 
		       return뒤에 오는 값을   함수를 호출한곳에 반환한다.
			   return문이 없는 함수도 있을 수 있다.
	- 객체
		- what : Object. 프로그래밍으로 구현해야될 대상.  속성(변수)와 행동,기능(함수)의 묶음
		- why : 인간이 생각하는 방법대로 특정개념이 가지고있는 속성과 행위를 하나의 변수로 묶어서 관리하면 
		      개발하기도 좋고, 이해하기도 좋고, 유지보수도 좋기 때문
		- how : 
			만드는 법
			     let 객체명 = { 키:값; 키2:값2;  기능명 : function(인풋){본문} };
		    사용하는 법 
				객체명.속성;
				객체명[속성];
				객체명.함수();
	- 생성자 함수
		- what : 객체를 생성하는 함수. 
		- why : 위의 객체방법으로 인스턴스를 생성하게 되면 인스턴스를 만들때마다 같은 코드가 반복되기 때문에
				설계도 하나를 만들어놓고 값만 바꿔가며 찍어내는 방식
		- how : function 생성자함수명(객체가만들어질때 필요한 변수들){
					this.속성명 = 값;
					this.속성명2 = 값2;
					this.기능명 = function(인풋){
						본문;
					}
				}
			찍어내는법 : let 인스턴스명 = new 생성자함수명(전달할 변수들);
	
	<3교시>
	- DOM
		- what : Document Object Model
			     HTML, XML의 모든 구성요소를 계층화된 노드의 형태로 만들어야 한다는 표준
		- why : JS를 통해 HTML이나 XML의 요소를 컨트롤 할 수 있게하기 위해
		        각 브라우저마다 통일된 API를 제공하기 위해 표준.
				DOM표준을 구현하는 것은 브라우저 제조사들의 개발 우선순위 1순위. 
		- how : DOM을 만드는것은 우리가 하는게 아니고 국제 협약. 개발자들은 사용을 하는거다.
			DOM의 표준을 활용해서 동적으로 HTML요소나 속성을 추가할 수 있다.
			
			- HTML 요소 선택
			  1. HTML 자체로 가져오기
				  let 변수 = document.getElementById('아이디명');	        //id로 가져오기
				  let 변수 = document.getElementsByClassName('클래스명');	//클래스로 가져오기. 배열이 리턴
				  let 변수 = document.getElementsByTagName('태그명');	//태그로 가져오기. 배열이 리턴
				  let 변수 = document.getElementsByName('네임명');	    //name으로 가져오기. 배열이 리턴
				  //html복습. id = 해당문서에서 유일하게 식별하기 위한 이름
							class = 해당문서에서 공통요소를 묶어서 식별하기 위한 이름
							name = 백엔드로 데이터를 전달할때 백엔드에서 인지할 이름
			  2. CSS선택자로 가져오기
				 document.querySelector('CSS선택자');	//선택된것중 첫번째 하나
				 document.querySelectorAll('CSS선택자');	//선택된 리스트
				 //CSS선택자 복습.   태그는 그냥, 아이디는 #, 클래스는 ., 자손은 띄어쓰기, 자식은 >
				                여러개는 ,    
					예) p태그안에 있는 img 태그중 클래스가 big인것을 선택하려면?
					   p img .big

	- 이벤트
		- what
			- 어떤 사건.  사건이 언제 발생될지 모르기 때문에 '어떤 요소에 어떤 사건이 일어나면 어떤 일을 해라'
			라고 미리 코딩해놔야 한다.	//이벤트감지(이벤트리스너),  감지시실행할함수(이벤트핸들러)
			- 이벤트의 종류
				- 마우스 : 클릭(click), 더블클릭(dblclick), 위로올라옴(mouseover), 떠남(mouseleave), 누름(mousedown), 뗌(mouseup)
				- 키보드 : 안보이는키가눌러짐(keypress), 모든키눌러짐(keydown), 눌러진키가올라옴(keyup)
				- 윈도우 : load(html의 로딩이 끝났음), scroll(키보드든,마우스든,터치든 스크롤), error
				- 인풋 : change(값이 기존값에서 변경), focusin(커서를 이 요소안에서 클릭해서 포커싱이 들어왔다), blur(포커싱이 아웃됐다), select(요소를 선택)
		- why
			- 웹을 동적으로 활용하기 위해서	//사용자의 행동에 반응하는 웹
			- 개발자가 순서대로 실행시키는것이 아니라, 비동기적으로 특정 조건이 만족되었을 때 실행.
		- how	
			요소가져와서 어떤이벤트를먹일지선택하고, 그 이벤트가 발생되었을때 실행할 코드를 전달
			- html에서 직접 하는법
				<input on이벤트타입="함수명();">
				<input on이벤트타입 = "실행할문장">
			- 자바스크립트를 통해 html속성을 건드리는 법
				객체.on이벤트타입 = function(){};
			- 자바스크립트를 통해 이벤트리스터를 추가하는 법
				객체.addEventListener("이벤트타입", function(event){
				});

로그인페이지에서 아이디, 비밀번호를 입력받는데
아이디가 20글자가 넘으면 20글자 미만의 글자를 입력해달라고 alert를 띄워보세요.
	1. html에 input으로 id입력받는 항목 만들기
	2. js로 해당 input의 요소를 가져오기
	3. 해당요소의 value가 몇글자인지 파악
	4. 20글자가 넘으면 alert띄우기
	5. 위의 것들을 언제실행해야되지?  id칸에 입력하자마자 실행해야되니까 change또는 focusout 랑 이벤트연결
	나중에 ux좋게 하려면-> dom요소를 동적으로 만들어서 아이디 입력칸 밑에 빨간색글자로 추가하는 방식으로 개발.
	or
	미리 만들어놓고 조건이 만족하면 안보였다, 조건이 만족하면 보였다 하는 방식으로 개발.

- 4교시 : jqeury
	jqeury는 자바스크립트를 브라우저에 상관없이 일괄적으로 쓰게하는 목적으로 발전된 라이브러리.
	기본문법 =   $(선택자).함수();
	jqeury를 갈수록 안쓰는 추세다. 이미 쓰고있는곳에도 걷어내고 있는 추세다.
	=> 표준화가 잘 진행되어서 자바스크립트 자체로도 잘 작동하기 때문에.
	   속도가 수십배 차이가 난다.
	   본질적이지 않다. 의존적이다.
	=> 제이쿼리가 자바스크립트 라이브러리 시장점유율1위. js를 쓰고있는 웹의 95%정도가 아직 제이쿼리 쓰고있다.
	
	cdn : Content Delivery Network
		웹에서 보여줄 (정적)컨텐츠를 전송 하는 서비스
		직접 서버를 운영할때의 문제 : 물리적 거리, 수많은 요청 감당
		서버전체기능을 똑같이 따라하는 미러사이트와는 다르다.
	
	호스팅 : hosting. HOST : 통신이 연결된 네트워크의 말단기기.
		   호스트를 빌리는것을 호스팅.
		   호스팅업체 = 컴퓨터를 빌려주는 업체(물리적으로 빌려주는게 아니라 소프트웨어적으로)
	
	dns : Domain Name Server
	      ip주소 = 세상의 모든 host에는 각각 자기만의 주소가 있어야지 어디에서 어디로 연결하는지가 결정.
		   0~255까지의수가 4번.  약 42억개의 말단 유니크한 주소를 설정할수있다.
		   지구상의 인간만 60억. 한명이 여러개의 통신기기.   회사, 정부.. 주인이바뀌거나 없는 매우많은 통신기기.
		   - 돌려막기 : SKT, LGT, KT 1000만개의 IP주소를 세계로부터 사왔다.  
		   고객이 2300만.  돌려막기.  한명이 컴퓨터를 끄면 그 주소를 켠사람에게 준다. 동적IP
		   나는 고정IP받고싶다. 그러면 1.7배 가격주면 내 고정IP받아서 서비스 쓸수있다.
		   - 공유기 : 고정아이피 하나에 포트를 쪼개서 내부아이피로 뿌리기.
		   255.0.51.3 이 학원이 고정IP 하나를 산거고
		   192.168.0.1은 공유기
		   192.168.0.2는 A반 선생님컴퓨터
		   192.168.0.3은 김승욱 컴퓨터
		   ...
		   192.168.0.60은 B반 선생님 컴퓨터
		   :포트번호
	
	램 = 주메모리 (1G~16G)
	하드디스크 = 보조메모리 (250G~4TB)
	
	하드디스크,ssd        램(RAM)        캐시             cpu
	프로그램             프로세스 
	도서관에 있는 책       집으로 빌려온책     내책상위의책        내가보고있는책
	2000us             				0.001us
	<----- 같은값에 용량이 크다.  느리다.               같은값에 용량이 작다. 빠르다.      ---->
	자연     먼곳의 동굴    근처의 창고     집안  
	
	컴퓨터의 구조, 목적, 진화 : 최소의 자원(비용)으로 최대의 효과
	OS(운영체제)
	
- 5교시부터 : 자바 세팅후에 맛보기
  자바설치 : 
	일반의 관점 (jre) : 자바로 만든 프로그램을 돌릴수있는 자바를 설치
	개발자의 관점 (jdk) : 자바로 프로그램을 만들수있도록 자바를 설치
	JDK(Java Development Kit)  > JRE(Java Runtime Environment) > JVM(Java Virutal Machine)
	
	1. JDK11.X.X 다운
	2. 윈도우 돋보기 "변수" 시스템 환경변수 편집 - 환경변수  에
	JAVA_HOME없고   PATH에 자바관련 없는거 확인
	3. 다운받은 exe더블클릭으로 설치
	4. 디폴트경로 : C:\Program Files\Java\jdk-버전\
	5. 설치확인
		cmd 창 열어서  java -version  (jre의 버전)
		           javac -version   (java compiler의 버전)
	---- 설치된 자바 패스를 바꿀려면 ---
	다시 환경변수를 확인해보면 PATH변수에 C:\Program Files\Common Files\Oracle\Java\javapath
	입력돼있음을 볼 수 있다.
	
	설치파일로깐게 아니라 파일만 다운받고 경로설정
	JAVA_HOME 변수를 만들고 C:\Program Files\Java\jdk-11.0.16 넣어주고
	PATH에서 %JAVA_HOME%\bin;
	
	
	이클립스 = JAVA IDE의 대표주자 = 
	Integrated Development Environment	(통합개발환경)
	스프링수업들어가면 이클립스말고 STS(Spring Tool Suite)
	이클립스에 스프링전용 플러그인을 설치하면 이클립스로 스프링 개발을 할 수 있다.
	STS는 아예 스프링전용으로 만들어진 이클립스.
	
	<이클립스(STS)설치 순서>
	1. STS3.9.xx버전 다운로드  		//스프링부트에서는 sts4쓸거임
	2. 7-zip 다운로드
	3. 7zip으로 압축풀기 - 안에 있는3개의 폴더중에 sts로 시작하는 폴더만 원하는 위치로 갖다놓기
	4. sts로 시작하는 폴더안에 있는 나뭇잎모양 실행파일 더블클릭
	5. 워크스페이스 원하는 경로의 원하는 폴더명으로 지정해주기
	6. 왼쪽사이드메뉴에서 create Java Project선택
		맨밑의 create Module 체크 해제
		finish 또는 next다음 finish누르면 Perspective(관점) 바꿔라하고 묻지말라고 체크
	7. 프로젝트에 src폴더 우클릭 - new - Class 
		main함수 만들겠다고 체크
	8. 만들어진 클래스의 main함수 안에서
		System.out.println("hello world");
	9. 파일 우클릭 - run as - java application 하면 
	   콘솔에 hello world 뜬다.
	10. 인코딩 설정
		windows - Preference - encoding 타이핑 검색
		몽땅 utf-8로 변경
		Content Type 에서 Java Class File, Text, 
			Text안의  Java Properties File, 
			Text안의 Java Source File
			Text안의 JSP
		Workspace 의 TextFileEncoding 
		web의 html, css, jsp, xml
	
	
	왜 부트스트랩을 썼나요?	
	왜 제이쿼리를 썼나요?
	왜 java를 배웠나?
	=> 부트스트랩을 안쓰면 무슨일어나는지 알고있고, 그 고통을 피하려면 부트스트랩외에 어떤것들이 있는지 알고있고
	그중에 부트스트랩을 쓴 이유
	=> 부트스트랩이 CSS프레임워크고, 저는 디자인에 대한 시간과 노력을 쓰기보다는 이미 잘 만들어진 라이브러리를 가져다쓰고,
	개발의 본질에 더 집중하기 위해서. 그런 여러가지 프레임워크중에 부트스트랩이 가장 많이 쓰이고 있기 때문에 
	현업에서도 쓸 확률이 가장 높고, 이걸 공부해놓으면 다른것을 공부하기에도 수월하다고 생각하기 때문에 그것을 공부.
	
	
	<단축키>
	syso  치고 ctrl space : System.out.println
	f11 : 제일최근에 실행했던 파일을 자동으로 실행
	
	
	부동소수점, 고정소수점
	둥둥떠다닌다. float
	
	Q.
	왜 자바를 만든사람들은 String이라는 기본적으로 보이는 자료형을 기본자료형으로 안만들고
	참조형으로 만들었을까?
	=> 기본자료형이아니라 참조형(객체)으로 만들면 뭐가 좋은가?
	=> 1. 주소에 의한 참조이기 때문에 값이 같을때 한곳만 바라보면 되니까 메모리 절약
	   2. .length,   .concat() 등   속성이나 함수를 지정해서 쓸수있다.
	      문자열과 관련된 속성이나 함수가 많기 때문에 객체형이 더 어울린다.
		  
	int double  원시형데이터타입이지만
	자바 마무리 공부쯤 되면
	Integer Double 이런 참조형 데이터타입이 있다. 
	
	
	자바스크립트가 씽씽카같은 느낌이라면
	자바는 자동차 운전 느낌.
	공부하기에 훨씬 어렵지만 공부하고나면 훨씬 복잡한 일을 더 좋은성능으로 할 수 있다.