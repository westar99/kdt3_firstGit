0907 수요일
<출석체크>
09:10 차형주(09:15)

<공지사항>
- 9시까지 와야 10분에 딱 수업시작가능
- 챗봇 최우수상(금융 : 장학금추천서비스) : 김승욱, 박세웅, 정민경, 홍승기, 서선호
	주제리스트 : 금융, 법률, 부동산
- 3시40분 '이것이 자바다' 책 분배
- 4시40분 백지학습법 발표자 : 박세웅, 김승욱, 홍승기

<복습>
javascript = 브라우저의 역사. JS의 역사.
	브랜든에이크가 프로토타입기반으로 liveScript -> 네스케이프. 자바의 인기에 편승. 자바스크립트로 이름변경
	MS가 표준을 안지키고 점유율을 가지고 맘대로 하다가, 구글의 크롬이 나오면서 중단된 표준화 다시 진행 ES5
	MS는 Explorer 업데이트 중단. 서비스 폐지.
데이터타입
	자바스크립트는 다이나믹 타입트 랭귀지다.
	선언할때 데이터타입이 정해지는게 아니고 값에 의해서 나중에 동적으로 결정된다.
	primitive데이터타입 5개 빼고는 다 object형 데이터타입
	원시형 : null, undefined, string, number, boolean
		null : 비어있음. 널의 타입을 찍으면 Object가 나오는데 버그다.
		undefined : 정의가 되지 않음.
		string : 문자열.   '', "" 아무거나 되는데 짝이 맞아야됨
		number : 숫자.   정수, 소수, 음수 다 포함
		boolean : true, false
	
변수
	변하는 수. variable
	변수키워드 : var(고전변수), let(요즘변수), const(상수)
		//var와 let의 차이 아직 안했고, const사용도 아직안했음
	문법 : 변수키워드 변수명 = 값;
		var num1 = 5;
		let str = "안녕하세요";
		const PI = 3.14;
	선언(declare) = 정의.   세상에 없던 변수를 처음으로 만드는거
	할당(assign) = 이미 존재하는 변수에 =(대입연산자)를 활용해서 우측의 값을 왼쪽항에 대입하는것.
	초기화(initialize) = 선언과 할당을 끝낸것.  (보통은 선언과 할당을 같이 한문장에 하는것)
연산자
	+, -, *, /,  **(제곱),  %(나머지)
	증감연산자(++)(--),  변수의 앞에 쓰이면 연산을 먼저하고 값을 사용. 
					변수의 뒤에 쓰이면 값을 사용하고 연산을 나중에.
					let a = 5;      console.log(a++);  //5   console.log(a)//6
	할당연산자  =,  +=, -=, *=, /=, %=
			a += 5;   // a = a + 5와 같다.
	비교연산자  ==(같다), !=(다르다), ===(값과 데이터타입이 같다.), <, >, <=, >=
	논리연산자  ||(or),  &&(and),  !(not)
	문자열에 +를 하면 문자열이 합쳐진다.   숫자와 문자열에 +를 하면 문자열이 된다.
조건문
	조건에 따라서 실행할 문장을 분기처리하는 역할
	문법
		if(조건1){
			조건1이 참일때 실행할 코드
		}else if(조건1이 만족안할시 조건2){
			조건2가 참일때 실행할 코드
		}else{
			위의 모든 조건을 만족안할시 실행할 코드
		}
	//if만 있고 else if나 else는 없어도 되고,   if안에 if가 중첩으로 들어갈수도 있다.

vscode에서 브라우저없이 직접 js를 쓰기위해서 nodejs와 coderunner 플러그인을 깔고 ctrl alt n으로 실행'

퀴즈 10개 풀고

<학습목표>
	- 조건문에는 if, switch, 삼항연산자
		if문 성능올리는 노하우
	- 반복문
		for
			일반화된문법 : for(초기화; 조건; 스탭){ 조건만족시 실행할 코드 };
			
		while
			일반화된문법 : while(조건){할일};
		do while	//일단 최초의 한번은 조건없이 하고봄
			일반화된문법 : do{할일}while(조건);
		for vs while
			for는 횟수가 중요한 조건에
			while은 범위가 중요한 조건에
			
	- 템플릿리터럴   console.log(`${변수} 하고싶은 문자열 `);	
	
	- 디버거(debugger)  debug : de+bug  버그를 없애는 행위.
	   버그 = 아무리봐도 분명히 코드에 이상이없는데 결과가 이상하게 나온다. 
              며칠을 고생하다가 컴퓨터에 나방이 말라죽은것을 발견하고 그것을 없앴더니 잘 작동하더라.
			  벌래를 없앤다 = 에러를 고친다
		디버그 행위를 도와주는 툴
	
	f5(디버거실행), f9(브레이크포인트 = 디버거가 실행을 시작할지점), f10(nextStep)
	브라우저라면 debugger;	
		
	- CSS 플렉스박스
	
	- 함수 : 엄청나게 중요한 산이라 내일 시작
		데이터타입, 변수, 조건문, 반복문 반드시 복습
			5시타임에 랜덤으로 3명을 뽑아서 백지
		함수를 제대로 이해하지 못하는것 : 프로그래밍을 못하게되는 근본적인 이유가 됨

	
	- 의존성을 벗어나야 한다.
	의존 = 그놈이 없으면 안된다.
	교재를 이거를 썼다. 그 교재에 한정된것만 공부하면 안된다. 그 교재가 없다면 아무것도 못하는 상황이 되면 안된다.
	선생님에게 의존하면 안된다.  나는 내가 내 공부를 주도하는거지. 선생님이 주도하는것에 따라간다.
	내가 만든 함수의 내부에서 다른 함수를 호출해야지만 정상적으로 작동하다 = 내함수는 그함수에 의존적이다.
	
	저는 이렇게 말하고, 부원장쌤은 저렇게말하고, 지인개발자는 이렇게 말하고.
	다 통합해서 최종결정은 자기가 하고, 책임도 자기는거지.
	
	- 신입 : 실력이 아니라 태도
	이력서, 자소서, 인성면접, 기술면접,       코딩테스트
	좋은대학, 좋은과 -> 학창시절의 태도
	어떤질문에 어떤 답을 해놨는가? 자기 삶에 대한 태도. 글을 쓰는 태도. 회사에 지원하는 태도.
	인성면접 -> 면접때 옷을 어떻게 입는가, 회사에 대해 얼마나 알아보고 지원하는가, 자기에 대해서 얼마나 잘 알고있는가.
	기술면접 -> 나는 이 기술을 쓸수있다.x  왜 그 기술을 써야하는지 안다.
	      무엇이 중요한지를 알고 버릴건 버리고, 공부할건 공부하고. '공부에 대한 태도'
    수업에 임하는 태도, 질문을 하는 태도.
	실력은 경력자들눈에는 다 고만고만.  태도가 좋은 놈을 뽑아놓으면 성장을 많이 한다.
	"프로젝트하면서 무엇이 가장 어려웠나요?"
	"왜 그 주제를 선택했나요?"
	"학원에서 배우지 않고 스스로 공부한게 있나요?"
	결론 -> 현재 실력 하나도 안중요하다. 공부의 태도가 중요하다.
	
	
	지식
	거의 변하지 않는 지식 : 대수학, 암호학?, 논리학, 컴퓨터구조, 네트워크, 
	몇십년단위로 변하는 지식 : 알고리즘, 프로그래밍언어(자바, 파이썬, 자바스크립트), 자료구조,
	트렌드가 빨리 변하는 지식 : 프레임워크(부트스트랩, 스프링, 뷰, 장고, 리액트), 라이브러리(제이쿼리..)
	
	위로갈수록 공부하는 양이 많아진다. 공부양에 비해 활용할곳이 없다. 한번 공부해놓으면 계속 써먹는다.
	밑으로 갈수록 공부의 양이 줄어든다. 조금만 공부해도 활용을 잘할수있다. 계속 새로운것을 공부해야한다.