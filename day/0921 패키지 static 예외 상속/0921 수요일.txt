0921 수요일
<출석체크>
09:10 박근태, 서선호, 오세영(결석)

<공지사항>
-1시 50분 취업관련 공지
 김수열 실장

<학습목표>
- 배열 복습
Array
동일한 데이터타입의 순서가있는 데이터의 묶음
왜쓰나?  변수를 여러개 쓰지않고 하나의 변수로써 여러개의 데이터를 다루기 위해
예) 2반의 5번학생 교무실로 호출.      누군지 몰라도 그놈에 접근할 수 있다. 순서(인덱스)를 통해서
인덱스 : index. 순서가 있는 자료형에서 해당데이터의 자릿수를 저장하는 숫자.
       0부터 시작해서 1씩 증가한다.
배열 선언하는 법 : 
	- 자료형[] 배열명 = {값, 값, 값};
	- 자료형[] 배열명 = new 자료형[크기];
배열의 원소에 접근하는 법:
	- 배열명[인덱스]
배열의 최대단점 : length(길이)가 최초의 선언한 값으로 고정되어 변경될 수 없다.

- 자바 객체, 생성자 복습
	객체 = Object
	서로 관련이있는 상태(변수)와 행위(함수)를 모아둔 집합
	그 객체들을 조합해서 하나의 완제품을 만드는것이 객체지향 프로그래밍(OOP) 패러다임이다.
	<개념>
	- 객체 : 소프트웨어로 구현해야될 대상(개념)
	- 클래스 : 자바에서 객체를 구현하기위한 설계도
	- 인스턴스 : 설계도대로 구현된 구체적인 실체
	Car tico = new Car();	자동차는 객체.   Car는 클래스.   tico는 인스턴스

- 기본형 자료형, 참조형 자료형
	- 기본자료형(primitive type) : 값에 의한 참조
		int a=5;   
		int b=a;  //b에는 a의 값인 5가 들어간다.
		b=100;     a는 5그대로다.
	- 참조형자료형, 객체(Object type) : 주소에 의한 참조
		과자 양파링 = new 과자();       
		과자 스윙칩 = 양파링;	//스윙칩에는 양파링의 데이터들이 전달되는게 아니라 양파링의 주소가 들어간다.
		스윙칩.가격 = 2000원;          //양파링.가격   2000원이 된다.
	
	
	<생성자>
	Contructor
	역할 : 설계도대로 인스턴스를 생성하는 역할
	생긴모양 : 메서드와 똑같이 생겼는데 리턴타입이 없고, 이름이 클래스명과 같다.
	사용하는법 :  데이터타입 인스턴스명 = new 생성자(필요한데이터);
	사용하는이유 : 어떠한 구체적인 실체를 만들기위해서 필요한 데이터를 생성시기에 주입받기 위해서.
		//클래스 내부에서 만들수없는 데이터를 클래스 외부에서 전달받기
		//데이터가 준비되지 않았으면 구체적인 실체를 만들 수 없게.
		//반드시 그 데이터가 준비되어야만 구체적인 실체를 만들 수 있게.
	클래스에는 최소한 하나이상의 생성자가 있어야한다.
	하나도없으면 자바가 디폴트 생성자를 자동으로 생성해준다.
	개발자가 하나라도 생성자를 만들면 디폴트 생성자는 안만들어진다.
	오버로딩이 작동된다.   //이름은같고 파라미터가 다른 여러 함수가 정의 되어있을때
	                  파라미터의 순서와 데이터타입에 맞는 함수가 호출되는 기능
	예) add(2,5),      add(2.5 , 7.0)        add(2,5,7)
	이름은 같지만 서로 다른 함수가 호출된다.
	우리가 이때까지 써왔던 System.out.println
	파라미터가 숫자여도 되고 문자열이여도되고 객체여도되고 더블이여도 됐다.
	이게 prinln함수를 만든사람이 오버로드할수있도록 여러함수를 정의해 놓은거다.
	
	this : 그 클래스로 만들어진 인스턴스 자기자신을 가르킨다.
	super : 그 클래스의 부모를 가르킨다.
		부모가 없다면 모든 객체의 최종조상인 Object클래스를 가리킨다.

- 패키지(2)
- 이클립스 테마설치로 디자인 커스터마이징
	help - eclipse marketplace - dark theme 검색

	- 에러나면
	windows탭 - Preferences - install/Update - 맨밑의 Verify provisioning 뭐시기 체크해제
	- 이후에 또 수정하려면
	windows탭 - Preferences - theme검색 - DevStyle에서 변경
	
	bugs like light
	개발자들은 다크테마를 좋아한다.
	
- 예외(3)

- 취업얘기(5교시)
인서울 대학교 : +300만
	다른직군은 대학이 중요하지만 개발자는 실력이 중요
	다른직군은 평생 학교가 따라다니고 진급할때도 중요하지만, 개발자는 5년정도의 유효기간.
전공자(6과목이상 IT관련 수업) : +200만
	개발을 하나도 모르는 컴퓨터학부   >   개발을 잘하는 비전공자
	어느 회사냐에 따라 다르다.  
	사람 머릿수채워넣고 돈버는 회사.  왼쪽
		인서울, 전공 개발하나도 못해?   5000회사.   3000.   2000남기는거
		지방. 비전공. 개발잘해?     4500회사.   3300.   1500남기
	직업 그신입개자가 1인분을 해내야되는 회사. 오른쪽

	자격증, 대학, 전공
	-> 서류를 위한 준비.
	길을걷다가 가게를 찾을때 간판을 보는것처럼  들어가서 음식을 맛보기전에
	이사람이 어떤 사람인지 실제로 파악하기 전에 좋은선택을 위한 확률을 높이는거다.
	포트폴리오의 퀄리티가 높다면 경쟁의 레벨이 달라지는거다.
	고만고만한 퀄리티라면 저것들의 가산점이 유효하지만
	포트폴리오의 클래스 자체가 달라저벼리면 가산점이 안먹힌다.
	금메달1  > 은메달10
	
	첫직장의 중요성
	첫직장으로 연봉 3000.     3300.    1년에 300차이. 한달에 25만원.
			3년에 900차이. 이게 중요한게 아니다.
	신입은 태도.  3000정도의 태도를 가진사람을 뽑은거. 그 회사는.
	내 선배도, 동기도, 후임도 저정도의 클래스를 가진사람들이 오는거다.
	매일 2%를 배우는 1년.   2%를 잃어가는 1년
	3000커트라인. 
	
	SI : System Integration. 시스템통합
		재고관리는 엑셀, 사원관리는 관리자홈페이지,  고객관리는 내부로만들어진프로그램
		외주같은개념인데 커다란회사의 부품화된 서비스를 하나로 합치는 작업.
		고객사 : 흥국생명, 삼성화재, 농협
				개발자들이 내부에 없는 큰 회사
		고객사에 출퇴근. 프로젝트가 끝나면 또 다른프로젝트의 고객사에 출퇴근.
	SM : System Management. 시스템 운영
		SI를 통해 개발된 프로젝트의 유지보수.
		고객이 완제품서비스를 쓰다보니까 불편사항이 생기고 수정요청이 생긴다.
		잘못된 점을 발견하고 버그 리포트를 한다.
		그런것들을 수정하면서 잘 돌아가게끔 유지 보수.
	솔루션 : 모듈화된 완제품을 납품하는 서비스.
		자기자체로는 서비스를 돌릴수없지만 다른놈이 내 솔루션을 써준다면 자원을 많이 절약할수 있게.
		예) DarkTheme, jqeury, 보안, 상품추적솔루션,..
	서비스 : 회사가 고객에게 배포하는 서비스를 자기네 개발자들로 직접 개발하고 있는 회사
		예) 네카라쿠배당토(네이버, 카카오톡, 라인, 쿠팡, 배달의민족, 당근마켓, 토스)
	
	여러 정보들을 취합해서 자기가 결정.
	예) A선생님은 이렇게 말하고 B선생님은 저렇게 말하고 C행정에는 저렇게 말해서 혼란스럽다.
	-> A선생님은 왜 그렇게 말했는지, B선생님 왜 그렇게 말했는지를 파악 하는 능력이 필요하다.
		내 행동에 대한 책임을 그사람에게 전가하는 습관을 벗어나야한다.
	
	졸업할때쯤 : 간단한 데이터분석, 간단한 웹 디자인(HTML, CSS, JS), 주전공 백엔드(JAVA, ORACLE)
			3400~3600.

	
- static(5교시)
- 싱글톤 디자인패턴
	정의 > 프로그램 전체에서 어떤 클래스의 인스턴스가 단 하나만 존재해야할 경우 사용
		생성자를 private으로 해서 외부에서 생성할수 없도록 하고 
		인스턴스를 반환하는 함수를 통해서 있으면 그놈을, 없으면 만들어서 반환하는 패턴
	왜? 장점이 뭐냐?
		1. 메모리 낭비가 없다. 
			//만들때마다 메모리에 공간을 할당하는게 아니고 한번 할당해서 돌려쓰기 때문에
		2. 인스턴스가 프로그램내에서 한개만 존재하는것을 보증
			//이미 있는데 또만들려고 하면 기존의 것을 반환하기 때문에
- 디자인패턴 : 개발자들이 이렇게 저렇게 개발을 하다보니까 이방법을 풀기위해서는 이방법이 제일 좋더라
			라고 정석으로 고착화된 패턴
	
- 엘리
리소스가 없어서가 아니고 Resourceful함이 없어서다.
리소스는 가져오는거다.
어려움을 극복하기 위해 빠르고 현명한 방법을 찾는 능력
create Useful, Unique solutions
원하는것을 이루기 위해 해결하기 위해 최고의 리소스를 찾아서 능동적으로 수행
	명확하고 구체적인 목표. 상황이 나를 정의하기전에 내가 먼저 상황을 정의해야 한다.
	틀에 박힌 프레임에서 벗어나기
- 나에게는 모든 문제를 해결할 힘이 있다.
- 이세상에는 내게 필요한 모든 리소스가 존재한다. 내가 아직 못찾았을 뿐이다.
- 해결 불가능한 문제는 이세상에 없다.

- 상속(7교시)  8교시에는 상속 자습
	ctrl alt 키보드아래 : 해당줄 복붙
	alt shift a : 멀티커서(마우스로 블록지정)
	ctrl space : 자동완성
	alt shift s : 소스

부모의 재산인데 자식에게 물려주기 싫다. 그러면 private하면 된다.